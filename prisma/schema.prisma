// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum VoteType {
  UP
  DOWN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                String         @id @default(cuid())
  name              String?
  email             String?        @unique
  emailVerified     DateTime?
  createdSubreddits Subreddit[]    @relation("CreatedBy")
  subscriptions     Subscription[]
  votes             Vote[]
  twitchChannel     TwitchChannel? // Add this line

  username String? @unique

  image       String?
  accounts    Account[]
  sessions    Session[]
  Post        Post[]
  Comment     Comment[]
  CommentVote CommentVote[]
}

model Game {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  parentId    String?     @unique
  parent      Game?       @relation("GameHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Game[]      @relation("GameHierarchy")
  subreddits  Subreddit[]
  tags        Tag[]
}

model Subreddit {
  id          String         @id @default(cuid())
  name        String         @unique
  game        Game?          @relation(fields: [gameId], references: [id])
  gameId      String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  posts       Post[] // Detailed guides or discussions specific to the game/topic
  description String?
  creatorId   String?
  creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers Subscription[]

  @@index([name])
  @@index([gameId])
  @@index([creatorId])
}

model Subscription {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String

  @@id([userId, subredditId])
  @@index([subredditId])
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     Json?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String
  comments    Comment[]
  votes       Vote[]
  tag         Tag?      @relation(fields: [tagId], references: [id])
  tagId       String?
  slug        String?

  @@index([authorId])
  @@index([subredditId])
  @@index([tagId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?

  @@index([authorId])
  @@index([postId])
  @@index([replyToId])
}

model Vote {
  user   User     @relation(fields: [userId], references: [id])
  userId String
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  type   VoteType

  @@id([userId, postId])
  @@index([postId])
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  type      VoteType

  @@id([userId, commentId])
  @@index([userId])
  @@index([commentId])
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  games Game[]
  posts Post[]
}

model TwitchChannel {
  id          String @id @default(cuid())
  channelName String @unique
  userId      String @unique
  user        User   @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Video {
  id         String    @id @default(cuid())
  videoid    String    @unique
  videotitle String    @db.Text
  transcript String    @db.LongText // Use Text for potentially long strings
  created_at DateTime  @default(now())
  summaries  Summary[]
}

model Summary {
  id         String   @id @default(cuid())
  videoid    String
  summary    String   @db.Text // Use Text for potentially long summaries
  updated_at DateTime @default(now())

  video Video @relation(fields: [videoid], references: [videoid], onDelete: Cascade)

  @@index([videoid])
}
